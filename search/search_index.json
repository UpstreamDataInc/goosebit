{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"gooseBit","text":"<p>A simplistic, opinionated remote update server implementing hawkBit\u2122's DDI API.</p>"},{"location":"#deployment","title":"Deployment","text":""},{"location":"#docker-compose-demo","title":"Docker Compose Demo","text":"<p>The Docker Compose demo docker/demo/docker-compose.yml may serve as inspiration for a containerized (cloud) deployment. It uses PostgreSQL as the database and NGINX as a reverse proxy.</p> <p>[!WARNING] Do not use the demo (as-is) in production!</p> <p>Make sure you have Docker (and Docker Compose) installed. Then run:</p> <pre><code>docker compose -f docker/demo/docker-compose.yml up\n</code></pre> <p>Visit gooseBit at: https://localhost</p>"},{"location":"#configuration","title":"Configuration","text":"<p>gooseBit can be configured through a configuration file (<code>/etc/goosebit.yaml</code>) or by setting environment variables. For the available options and their defaults, see goosebit.yaml. The environment variable corresponding to e.g. the <code>poll_time</code> YAML setting would be <code>GOOSEBIT_POLL_TIME</code>. Environment variables for nested settings are constructed using <code>__</code> as the separator:</p> <pre><code>GOOSEBIT_DEVICE_AUTH__ENABLE=true\n</code></pre> <p>Alternatively, a JSON string can be assigned:</p> <pre><code>GOOSEBIT_DEVICE_AUTH='{\"enable\": true}'\n</code></pre>"},{"location":"#database","title":"Database","text":"<p>By default, SQLite is used as the database. For more sophisticated setups, PostgreSQL is supported. To use PostgreSQL, set <code>db_uri</code> or the <code>GOSSEBIT_DB_URI</code> environment variable to something like:</p> <pre><code>postgres://user:password@host:5432/db_name\n</code></pre>"},{"location":"#artifact-storage","title":"Artifact Storage","text":"<p>The software packages managed by gooseBit are either stored on the local filesystem (<code>artifacts_dir</code> setting) or an S3-compatible object storage.</p>"},{"location":"#assumptions","title":"Assumptions","text":"<ul> <li>Devices use SWUpdate or RAUC + RAUC hawkBit Updater for managing software updates.</li> <li>Devices send certain attributes (<code>sw_version</code>, <code>hw_boardname</code>, <code>hw_revision</code>).</li> <li>Semantic versions are used.</li> <li>With RAUC and multiple hardware revisions, <code>compatible</code> in <code>manifest.raucm</code> is set to something like <code>my-board-rev4.2</code> or <code>Some Board 2b</code>.</li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#device-registry","title":"Device Registry","text":"<p>When a device connects to gooseBit for the first time, it is automatically added to the device registry. The server will then request the device's configuration data, including:</p> <ul> <li><code>hw_boardname</code> and <code>hw_revision</code>: Used to match compatible software.</li> <li><code>sw_version</code>: Indicates the currently installed software version.</li> </ul> <p>The registry tracks each device's status, including the last online timestamp, installed software version, update state, and more.</p>"},{"location":"#software-repository","title":"Software Repository","text":"<p>Software packages (<code>*.swu</code>/<code>*.raucb</code> files) can be hosted directly on the gooseBit server or on an external server. gooseBit parses the software metadata to determine compatibility with specific hardware models and revisions.</p>"},{"location":"#device-update-modes","title":"Device Update Modes","text":"<p>Devices can be configured with different update modes. The default mode is <code>Rollout</code>.</p>"},{"location":"#1-manual-update-to-specified-software","title":"1. Manual Update to Specified Software","text":"<p>Assign specific software to a device manually. Once installed, no further updates will be triggered.</p>"},{"location":"#2-automatic-update-to-latest-software","title":"2. Automatic Update to Latest Software","text":"<p>Automatically updates the device to the latest compatible software, based on the reported <code>hw_model</code> and <code>hw_revision</code>. Note: versions are interpreted as SemVer versions.</p>"},{"location":"#3-software-rollout","title":"3. Software Rollout","text":"<p>Rollouts target all devices with a specified \"feed\" value, ensuring that the assigned software is installed on all matching devices. Rollouts also track success and error rates, with future plans for automatic aborts. If multiple rollouts exist for the same feed, the most recent rollout takes precedence.</p>"},{"location":"#pause-updates","title":"Pause Updates","text":"<p>Devices can be pinned to their current software version, preventing any updates from being applied.</p>"},{"location":"#real-time-update-logs","title":"Real-time Update Logs","text":"<p>While updates are in progress, gooseBit captures real-time logs, which are accessible through the device repository.</p>"},{"location":"#development-with-poetry","title":"Development with Poetry","text":""},{"location":"#initial-setup","title":"Initial Setup","text":"<p>Install Poetry as described here.</p> <p>Then, to install gooseBit's dependencies, run:</p> <pre><code>poetry install\n</code></pre> <p>Initialize the database:</p> <pre><code>poetry run aerich upgrade\n</code></pre> <p>Launch gooseBit:</p> <pre><code>poetry run python -m goosebit\n</code></pre> <p>The service is now available at: http://localhost:60053</p>"},{"location":"#database_1","title":"Database","text":"<p>Initialize or migrate database:</p> <pre><code>poetry run aerich upgrade\n</code></pre> <p>After a model change create the migration:</p> <pre><code>poetry run aerich migrate\n</code></pre> <p>To seed some sample data (attention: drops all current data) use:</p> <pre><code>poetry run generate-sample-data\n</code></pre>"},{"location":"#code-formatting-and-linting","title":"Code formatting and linting","text":"<p>Code is formatted using different tools</p> <ul> <li>black and isort for <code>*.py</code></li> <li>biomejs for <code>*.js</code>, <code>*.json</code></li> <li>prettier for <code>*.html</code>, <code>*.md</code>, <code>*.yml</code>, <code>*.yaml</code></li> </ul> <p>Code is linted using different tools as well</p> <ul> <li>flake8 for <code>*.py</code></li> <li>biomejs for <code>*.js</code></li> </ul> <p>Best to have pre-commit install git hooks that run all those tools before a commit:</p> <pre><code>poetry run pre-commit install\n</code></pre> <p>To manually apply the hooks to all files use:</p> <pre><code>poetry run pre-commit run --all-files\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Tests are implemented using pytest. You can run all the tests with:</p> <pre><code>poetry run pytest\n</code></pre> <p>To run only the unit tests:</p> <pre><code>poetry run pytest tests/unit\n</code></pre> <p>To run only the end-to-end tests:</p> <pre><code>poetry run pytest tests/e2e\n</code></pre>"},{"location":"#development-with-docker-and-postgresql","title":"Development with Docker (and PostgreSQL)","text":""},{"location":"#running-the-containers","title":"Running the Containers","text":"<pre><code>docker compose -f docker/docker-compose-dev.yml up --build\n</code></pre>"},{"location":"#applying-the-migrations","title":"Applying the Migrations","text":"<pre><code>docker exec goosebit-dev python -m aerich upgrade\n</code></pre>"},{"location":"#using-the-interactive-debugger","title":"Using the Interactive Debugger","text":"<p>You might need rlwrap to fix readline support.</p> <p>Place <code>breakpoint()</code> before the code you want to debug. The server will reload automatically. Then, connect to remote PDB (when the breakpoint has been hit):</p> <pre><code>rlwrap telnet localhost 4444\n</code></pre> <p>To exit the debugger, press <code>Ctrl + ]</code> and then <code>q</code>.</p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#structure","title":"Structure","text":"<p>The structure of gooseBit is as follows:</p> <ul> <li><code>api</code>: Files for the API.</li> <li><code>ui</code>: Files for the UI.</li> <li><code>bff</code>: Backend for frontend API.</li> <li><code>static</code>: Static files.</li> <li><code>templates</code>: Jinja2 formatted templates.</li> <li><code>nav</code>: Navbar handler.</li> <li><code>updater</code>: DDI API handler and device update manager.</li> <li><code>updates</code>: SWUpdate/RAUC file parsing.</li> <li><code>auth</code>: Authentication functions and permission handling.</li> <li><code>models</code>: Database models.</li> <li><code>db</code>: Database config and initialization.</li> <li><code>schema</code>: Pydantic models used for API type hinting.</li> <li><code>settings</code>: Settings loader and handler.</li> <li><code>storage</code>: Storage for software artifacts.</li> <li><code>telemetry</code>: Telemetry data handlers.</li> <li><code>routes</code>: Routes for a giving endpoint, including the router.</li> </ul>"},{"location":"goosebit_forwarded_header/","title":"gooseBit Plugin for Forwarded HTTP Header Support","text":"<p>Enables the use of standard Forwarded HTTP headers (RFC 7239). This has been introduced because uvicorn (in conjunction with gunicorn) does not support the feature (yet): uvicorn#2237</p>"},{"location":"goosebit_forwarded_header/#installation","title":"Installation","text":"<p>When using a Docker image, the plugin can be installed as follows:</p> <pre><code>FROM upstreamdata/goosebit\n\nUSER root\n\nRUN pip install --no-cache-dir goosebit-forwarded-header\n\nUSER goosebit\n</code></pre>"},{"location":"goosebit_forwarded_header/#configuration","title":"Configuration","text":"<p>Enable the plugin in <code>goosebit.yaml</code> (or set the corresponding environment variable):</p> <pre><code>plugins:\n  - goosebit_forwarded_header\n</code></pre>"},{"location":"goosebit_simple_stats/","title":"gooseBit Simple Stats Plugin","text":"<p>A simple example plugin for testing and understanding gooseBit's plugin system.</p> <p>This plugin sets up a page which shows software count and/or device count.</p>"},{"location":"goosebit_simple_stats/#installation","title":"Installation","text":"<p>When using a Docker image, the plugin can be installed as follows:</p> <pre><code>FROM upstreamdata/goosebit\n\nUSER root\n\nRUN pip install --no-cache-dir goosebit-simple-stats\n\nUSER goosebit\n</code></pre>"},{"location":"goosebit_simple_stats/#configuration","title":"Configuration","text":"<p>Enable the plugin in <code>goosebit.yaml</code> (or set the corresponding environment variable):</p> <pre><code>plugins:\n  - goosebit_simple_stats\n</code></pre> <p>Configure which data to show:</p> <pre><code>simple_stats_show:\n  - device_count\n  - software_count\n</code></pre>"}]}