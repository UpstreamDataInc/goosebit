name: Release

on:
  push:
    tags:
      - "v*.*.*"
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "docsrc/**"

jobs:
  pypi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Publish GH release
        uses: softprops/action-gh-release@v2.0.6
        with:
          generate_release_notes: true

      - name: Build using Poetry and publish to PyPI
        uses: JRubics/poetry-publish@v2.0
        with:
          pypi_token: ${{ secrets.PYPI_API_KEY }}

  docker:
    needs: pypi
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set GOOSEBIT_VERSION env var
        run: |
          if [ $GITHUB_REF_TYPE = tag ]; then
            tag=$GITHUB_REF_NAME
          else
            echo "This job is only supposed to be run for Git tags"
            exit 1
          fi
          echo "GOOSEBIT_VERSION=${tag#v}" >> $GITHUB_ENV

      - name: Wait for PyPI package to become available
        run: |
          while [ "$(curl -Ss https://pypi.org/pypi/goosebit/json |
            jq ".releases | has(\"$GOOSEBIT_VERSION\")")" != "true" ]
          do
            sleep 1
          done

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: upstreamdata/goosebit

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.6.1
        with:
          context: docker
          build-args: GOOSEBIT_VERSION=${{ env.GOOSEBIT_VERSION }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
